#include <iostream>
#include <fstream>
#include <stdlib.h>
#include <math.h>

#include "cuda_runtime.h"
#include "device_launch_parameters.h"

#define INF 100
#define dim 5


using namespace std;

int costMatrix[dim][dim] = { {0,4,INF,8,INF},
{4,0,2,INF,INF},
{INF, 2, 0, 1},
{8,INF,1,0,INF },
{INF,INF,3,INF,0}};



void printMatrix(int costMatrix[dim][dim]) {
	for (int i = 0; i < dim; i++) {
		for (int j = 0; j < dim; j++) {
			if (costMatrix[i][j] = INF)
			{
				cout << "INF";
			}
			else {
				cout << costMatrix[i][j];
			}
		}
	}
}

__global__ void RoyFloyd(int k, int costMatrix[dim][dim]) {
	int i = threadIdx.x;
	int j = threadIdx.y;

	if (costMatrix[i][j] > costMatrix[k][j] + costMatrix[i][k])
	{
		costMatrix[i][j] = costMatrix[k][j] + costMatrix[i][k];
	}

}

int main() {
	int nrBlocks = 1;
	dim3 threadsPerBlock(dim, dim);

	int *d_costMatrix;
	cudaMalloc(&d_costMatrix, dim * sizeof(int));

	cudaMemcpy(&d_costMatrix, &costMatrix, dim * sizeof(int), cudaMemcpyHostToDevice);

	for (int k = 0; k<dim; k++) {
		RoyFloyd << < nrBlocks, threadsPerBlock > >> (d_costMatrix, k);
		cudaMemcpy(&costMatrix, &d_costMatrix, dim * sizeof(int), cudaMemcpyDeviceToHost);
	}

	cudaFree(d_costMatrix);
	return 0;
}